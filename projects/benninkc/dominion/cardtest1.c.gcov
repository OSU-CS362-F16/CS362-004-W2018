        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 3 returned 100% blocks executed 95%
        3:    8:int main(int argc, char const *argv[]) {
        3:    9:    int seed = 1024;
        3:   10:    int numPlayer = 3;
        -:   11:    int p, r, handCount;
        3:   12:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   13:               , remodel, smithy, village, baron, great_hall};
        -:   14:    struct gameState G;
        3:   15:    int maxHandCount = 5;
        -:   16:
        -:   17:    int smy[MAX_HAND];
        -:   18:    int i;
     1503:   19:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   20:    {
     1500:   21:        smy[i] = smithy;
        -:   22:    }
        -:   23:
        3:   24:    printf ("TESTING smithy card:\n");
call    0 returned 100%
       12:   25:    for (p = 0; p < numPlayer; p++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   26:
       63:   27:    	for (handCount = 0; handCount <= maxHandCount; handCount++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       54:   28:    		printf("Test player %d playing Smithy card, hand size: %d\n", p, handCount);
call    0 returned 100%
        -:   29:    		
       54:   30:    		memset(&G, 23, sizeof(struct gameState));
       54:   31:            r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
       54:   32:            G.whoseTurn = p;
       54:   33:            G.handCount[p] = handCount;
       54:   34:            memcpy(G.hand[p], smy, sizeof(int) * handCount);
        -:   35:
       54:   36:            r = playCard(0, 0, 0, 0, &G);
call    0 returned 100%
        -:   37:
       54:   38:            printf("G.handCount = %d, expected = %d\n", G.handCount[p], handCount + 2);
call    0 returned 100%
        -:   39:
       54:   40:            if (G.handCount[p] == handCount + 2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:            	printf("Smithy TEST PASSED\n");
call    0 never executed
        -:   42:            }
        -:   43:            else {
       54:   44:            	printf("Smith TEST FAILED\n");
call    0 returned 100%
        -:   45:            }
        -:   46:    	}
        -:   47:    }
        -:   48:
        3:   49:	return 0;
        -:   50:}
