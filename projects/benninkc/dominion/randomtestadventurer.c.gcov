        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************
        -:    2: ** Author: Casey Bennink ONID: benninkc
        -:    3: ** Date: 2/4/18
        -:    4: ** Description: Assignment 4 randomtestadventurer.c
        -:    5: ** test for adventurer
        -:    6:*********************************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <math.h>
        -:   14:#include <time.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:int cardEffectFails = 0;
        -:   18:int shuffleFails = 0;
        -:   19:int drawCardFails = 0;
        -:   20:int deckHandCountFails = 0;
        -:   21:int treasureCountFails = 0;
        -:   22:
    10000:   23:void checkAdventurerCard(int p, struct gameState *post)
        -:   24:{
    10000:   25:	int PostTreasureCount = 0;
    10000:   26:	int PreTreasureCount = 0;
        -:   27:	int temphand[MAX_HAND];
    10000:   28:	int drawntreasure = 0;
    10000:   29:	int cardDrawn = 0;
        -:   30:	
        -:   31:	struct gameState pre;
    10000:   32:	int card = 0;
    10000:   33:	int bonus = 0;
        -:   34:	int r, s, t, i;
    10000:   35:	int z = 0;
    10000:   36:	memcpy(&pre,post,sizeof(struct gameState));
        -:   37:	
    10000:   38:	r = cardEffect(adventurer, 0, 0, 0, post, 0, &bonus);
        -:   39:	
    10000:   40:	if (r)
        -:   41:	{
    10000:   42:		cardEffectFails++;
        -:   43:	}
        -:   44:	
  1282778:   45:	while(drawntreasure < 2)
        -:   46:	{
  1262778:   47:		if (pre.deckCount[p] < 1)
        -:   48:		{
    #####:   49:			s = shuffle(p, &pre);
    #####:   50:			if (s == -1 && pre.deckCount[p] >=1)
        -:   51:			{
    #####:   52:				shuffleFails++;
        -:   53:			}
        -:   54:		}
  1262778:   55:		t = drawCard(p, &pre);
  1262778:   56:		if (t == -1 && pre.deckCount[p] != 0)
        -:   57:		{
    #####:   58:			drawCardFails++;
        -:   59:		}
  1262778:   60:		cardDrawn = pre.hand[p][pre.handCount[p] -1];
  1262778:   61:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:   62:		{
    20000:   63:			drawntreasure++;
        -:   64:		}
        -:   65:		else
        -:   66:		{
  1242778:   67:			temphand[z] = cardDrawn;
  1242778:   68:			pre.handCount[p]--;
  1242778:   69:			z++;
        -:   70:		}
        -:   71:	}
  1262778:   72:	while(z -1 >= 0)
        -:   73:	{
  1242778:   74:		pre.discard[p][pre.discardCount[p]++] = temphand[z-1];
  1242778:   75:		z = z-1;
        -:   76:	}
        -:   77:	
  2545437:   78:	for (i = 0; i < post->handCount[p]; i++)
        -:   79:	{
  2535437:   80:		card = post->hand[p][i];
  2535437:   81:		if (card == copper || card == silver || card == gold)
        -:   82:		{
    30000:   83:			PostTreasureCount++;
        -:   84:		}
        -:   85:	}
    10000:   86:	if (PostTreasureCount != PreTreasureCount)
        -:   87:	{
    10000:   88:		treasureCountFails++;
        -:   89:	}
        -:   90:	
    10000:   91:	int postHC = post->handCount[p];
    10000:   92:	int postDC = post->deckCount[p];
    10000:   93:	int postDCC = post->discardCount[p];
    10000:   94:	int preHC = pre.handCount[p];
    10000:   95:	int preDC = pre.deckCount[p];
    10000:   96:	int preDCC = pre.discardCount[p];
        -:   97:	
    10000:   98:	if(!(postHC == preHC && postDC == preDC && postDCC == preDCC))
        -:   99:	{
    10000:  100:		deckHandCountFails++;
        -:  101:	}
    10000:  102:}
        -:  103:	
        1:  104:int main()
        -:  105:{
        1:  106:	printf("Adventurer Random Test\n");
        1:  107:	int iterations = 10000;
        -:  108:	int i, n, player;
        1:  109:	int treasures[] = {copper, silver, gold};
        -:  110:	int numTreasures;
        -:  111:	struct gameState G;
        1:  112:	srand(time(NULL));
        1:  113:	int min = 3;
        -:  114:	
    10001:  115:	for (n = 0; n < iterations; n++)
        -:  116:	{
263010000:  117:		for (i = 0; i < sizeof(struct gameState); i++)
        -:  118:		{
263000000:  119:			((char*)&G)[i] = floor(Random() * 256);
        -:  120:		}
        -:  121:		
    10000:  122:		player = floor(Random() * MAX_PLAYERS);
    10000:  123:		G.deckCount[player] = floor(Random() * ((MAX_DECK - min) + 1) + min);
    10000:  124:		numTreasures = floor(Random() * ((G.deckCount[player] - min) + 1) + min);
        -:  125:		
  1271160:  126:		for (i = 0; i < numTreasures; i++)
        -:  127:		{
  1261160:  128:			G.deck[player][i] = treasures[rand() %3];
        -:  129:		}
    10000:  130:		G.discardCount[player] = 0;
    10000:  131:		G.handCount[player] = floor(Random() * ((MAX_HAND - min) + 1) + min);
    10000:  132:		G.whoseTurn = player;
        -:  133:		
    10000:  134:		checkAdventurerCard(player, &G);
        -:  135:	}
        -:  136:	
        1:  137:	int totalFails = cardEffectFails = cardEffectFails + drawCardFails + shuffleFails + deckHandCountFails + treasureCountFails;
        -:  138:	
        -:  139:	
        1:  140:	if (totalFails == 0)
        -:  141:	{
    #####:  142:		printf("All random Village tests PASSED!");
        -:  143:	}
        -:  144:	else
        -:  145:	{
        1:  146:		printf("Failures:\n");
        1:  147:		printf("drawCard failed: %d\n", drawCardFails);
        1:  148:		printf("cardEffect failed: %d\n", cardEffectFails);
        1:  149:		printf("shuffle failed: %d\n", shuffleFails);
        1:  150:		printf("treasure count failed %d\n", treasureCountFails);
        1:  151:		printf("Hand/Deck fails: %d\n", deckHandCountFails);
        -:  152:	}
        -:  153:	
        1:  154:	return 0;
        -:  155:}
