Result for running Dominion test suit:
unittest1.c:
TESTING discardCard():
Test player 0 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
File 'unittest1.c'
Lines executed:96.77% of 31
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:17.76% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    18900:    8:int compare(const void* a, const void* b) {
    18900:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    18900:   11:  if (*(int*)a < *(int*)b)
     5040:   12:    return -1;
    13860:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      420:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      420:   44:  SelectStream(1);
      420:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      420:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      420:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     4620:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    46200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    42000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      420:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      420:   77:  else if (numPlayers == 3)
        -:   78:    {
      420:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      420:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      420:   95:      state->supplyCount[estate] = 12;
      420:   96:      state->supplyCount[duchy] = 12;
      420:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      420:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      420:  102:  state->supplyCount[silver] = 40;
      420:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     8820:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    69300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    65100:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4200:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1680:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      840:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     3360:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    60900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1680:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1260:  140:      state->deckCount[i] = 0;
     5040:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3780:  143:	  state->deck[i][j] = estate;
     3780:  144:	  state->deckCount[i]++;
        -:  145:	}
    10080:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8820:  148:	  state->deck[i][j] = copper;
     8820:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1680:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1260:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1680:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1260:  166:      state->handCount[i] = 0;
     1260:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    11760:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    11340:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      420:  182:  state->outpostPlayed = 0;
      420:  183:  state->phase = 0;
      420:  184:  state->numActions = 1;
      420:  185:  state->numBuys = 1;
      420:  186:  state->playedCardCount = 0;
      420:  187:  state->whoseTurn = 0;
      420:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     2520:  192:  for (it = 0; it < 5; it++){
     2100:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      420:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      420:  198:  return 0;
        -:  199:}
        -:  200:
     1260:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1260:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1260:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1260:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15120:  214:  while (state->deckCount[player] > 0) {
    12600:  215:    card = floor(Random() * state->deckCount[player]);
    12600:  216:    newDeck[newDeckPos] = state->deck[player][card];
    12600:  217:    newDeckPos++;
    46200:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    33600:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    12600:  221:    state->deckCount[player]--;
        -:  222:  }
    13860:  223:  for (i = 0; i < newDeckPos; i++) {
    12600:  224:    state->deck[player][i] = newDeck[i];
    12600:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1260:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     2100:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2100:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2100:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2100:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2100:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2100:  576:    state->deckCount[player]--;
     2100:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2100:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
      420: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
      420: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
      105: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      105: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
      420: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
      420: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
      168: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
      252: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
      252: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
      252: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
      252: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
      420: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
      420: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
      420: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
     2520: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
     2100: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
     2100: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
      420: 1379:  state->coins += bonus;
        -: 1380:
      420: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
unittest2.c:
TESTING whoseTurn
Testing 0 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 0 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 0 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 0 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 1 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 1 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 1 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 1 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 2 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 2 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 2 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 2 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
File 'unittest2.c'
Lines executed:95.83% of 24
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:15.99% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        8:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       32:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      284:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      204:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
        4: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        4: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       24: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       20: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       20: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        4: 1379:  state->coins += bonus;
        -: 1380:
        4: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
unittest3.c:
TESTING drawCard.
drawCard TEST SUCCESSFULLY COMPLETED
File 'unittest3.c'
Lines executed:74.07% of 27
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:15.81% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
        1: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
        1: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
        6: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
        5: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
        4: 1366:	  state->coins += 1;
        -: 1367:	}
        1: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
        1: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
        1: 1379:  state->coins += bonus;
        -: 1380:
        1: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
unittest4.c:
TESTING gainCard
Test player 0 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

TESTS PASSED
File 'unittest4.c'
Lines executed:100.00% of 42
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:18.12% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6480:    8:int compare(const void* a, const void* b) {
     6480:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     6480:   11:  if (*(int*)a < *(int*)b)
     1728:   12:    return -1;
     4752:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      108:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      108:   44:  SelectStream(1);
      108:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      108:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      108:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1188:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    11880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    10800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      108:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      108:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      108:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      108:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      108:   95:      state->supplyCount[estate] = 12;
      108:   96:      state->supplyCount[duchy] = 12;
      108:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      108:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      108:  102:  state->supplyCount[silver] = 40;
      108:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2268:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    17820:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    16740:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1080:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      432:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      216:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      864:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15660:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      540:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      432:  140:      state->deckCount[i] = 0;
     1728:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1296:  143:	  state->deck[i][j] = estate;
     1296:  144:	  state->deckCount[i]++;
        -:  145:	}
     3456:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3024:  148:	  state->deck[i][j] = copper;
     3024:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      540:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      432:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      540:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      432:  166:      state->handCount[i] = 0;
      432:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3024:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2916:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      108:  182:  state->outpostPlayed = 0;
      108:  183:  state->phase = 0;
      108:  184:  state->numActions = 1;
      108:  185:  state->numBuys = 1;
      108:  186:  state->playedCardCount = 0;
      108:  187:  state->whoseTurn = 0;
      108:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      648:  192:  for (it = 0; it < 5; it++){
      540:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      108:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      108:  198:  return 0;
        -:  199:}
        -:  200:
      432:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      432:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      432:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      432:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5184:  214:  while (state->deckCount[player] > 0) {
     4320:  215:    card = floor(Random() * state->deckCount[player]);
     4320:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4320:  217:    newDeckPos++;
    14472:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    10152:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     4320:  221:    state->deckCount[player]--;
        -:  222:  }
     4752:  223:  for (i = 0; i < newDeckPos; i++) {
     4320:  224:    state->deck[player][i] = newDeck[i];
     4320:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      432:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      324:  320:int supplyCount(int card, struct gameState *state) {
      324:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      540:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      540:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      540:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      540:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      540:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      540:  576:    state->deckCount[player]--;
      540:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      540:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
      324: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
      324: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
      324: 1332:  if (toFlag == 1)
        -: 1333:    {
      108: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      108: 1335:      state->deckCount[player]++;
        -: 1336:    }
      216: 1337:  else if (toFlag == 2)
        -: 1338:    {
      108: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      108: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
      108: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      108: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
      324: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
      324: 1351:  return 0;
        -: 1352:}
        -: 1353:
      108: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
      108: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
      648: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
      540: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
      540: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
      108: 1379:  state->coins += bonus;
        -: 1380:
      108: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
cardtest1.c:
TESTING smithy card:
Test player 0 playing Smithy card, hand size: 0
G.handCount = 0, expected = 2
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 0
G.handCount = 0, expected = 2
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 0
G.handCount = 0, expected = 2
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
File 'cardtest1.c'
Lines executed:95.45% of 22
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:23.09% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      810:    8:int compare(const void* a, const void* b) {
      810:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      810:   11:  if (*(int*)a < *(int*)b)
      216:   12:    return -1;
      594:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       18:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       18:   44:  SelectStream(1);
       18:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       18:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1980:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       18:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       18:   77:  else if (numPlayers == 3)
        -:   78:    {
       18:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       18:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       18:   95:      state->supplyCount[estate] = 12;
       18:   96:      state->supplyCount[duchy] = 12;
       18:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       18:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  102:  state->supplyCount[silver] = 40;
       18:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2970:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2790:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      180:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       72:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       36:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      144:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      180:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2610:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       54:  140:      state->deckCount[i] = 0;
      216:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      162:  143:	  state->deck[i][j] = estate;
      162:  144:	  state->deckCount[i]++;
        -:  145:	}
      432:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      378:  148:	  state->deck[i][j] = copper;
      378:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       54:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       54:  166:      state->handCount[i] = 0;
       54:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      486:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       18:  182:  state->outpostPlayed = 0;
       18:  183:  state->phase = 0;
       18:  184:  state->numActions = 1;
       18:  185:  state->numBuys = 1;
       18:  186:  state->playedCardCount = 0;
       18:  187:  state->whoseTurn = 0;
       18:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
       90:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       18:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       18:  198:  return 0;
        -:  199:}
        -:  200:
       54:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       54:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       54:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       54:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      648:  214:  while (state->deckCount[player] > 0) {
      540:  215:    card = floor(Random() * state->deckCount[player]);
      540:  216:    newDeck[newDeckPos] = state->deck[player][card];
      540:  217:    newDeckPos++;
     1980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1440:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      540:  221:    state->deckCount[player]--;
        -:  222:  }
      594:  223:  for (i = 0; i < newDeckPos; i++) {
      540:  224:    state->deck[player][i] = newDeck[i];
      540:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       54:  228:  return 0;
        -:  229:}
        -:  230:
       18:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       18:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       18:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       18:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       18:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       18:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        3:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       15:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       18:  315:int handCard(int handPos, struct gameState *state) {
       18:  316:  int currentPlayer = whoseTurn(state);
       18:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       33:  346:int whoseTurn(struct gameState *state) {
       33:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      120:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      120:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      120:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      120:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      120:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      120:  576:    state->deckCount[player]--;
      120:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      120:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
       15:  793:      smithyFunc(state, currentPlayer, handPos);
       15:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
       15: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
       15: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
       45: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
       30: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
       15: 1225:    discardCard(handPos, currentPlayer, state, 0);
       15: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
       15: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
       15: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
       15: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
       15: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
       15: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
       15: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
       15: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
       15: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
       15: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
       15: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
       18: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       18: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
      108: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       90: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       90: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
       18: 1379:  state->coins += bonus;
        -: 1380:
       18: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
cardtest2.c:
TESTING adventurer card:
Test player 0 playing adventurer card, hand size: 1
G.handCount = 3, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 2
G.handCount = 4, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 3
G.handCount = 5, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 4
G.handCount = 6, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 5
G.handCount = 7, 4 <= expected <= 6
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 1
G.handCount = 4, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 2
G.handCount = 5, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 3
G.handCount = 6, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 4
G.handCount = 7, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 5
G.handCount = 8, 4 <= expected <= 6
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 1
G.handCount = 4, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 2
G.handCount = 5, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 3
G.handCount = 6, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 4
G.handCount = 7, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 5
G.handCount = 8, 4 <= expected <= 6
Adventurer TEST FAILED
File 'cardtest2.c'
Lines executed:95.45% of 22
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:24.51% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      675:    8:int compare(const void* a, const void* b) {
      675:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      675:   11:  if (*(int*)a < *(int*)b)
      180:   12:    return -1;
      495:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       15:   77:  else if (numPlayers == 3)
        -:   78:    {
       15:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       15:   95:      state->supplyCount[estate] = 12;
       15:   96:      state->supplyCount[duchy] = 12;
       15:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       30:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       45:  140:      state->deckCount[i] = 0;
      180:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      135:  143:	  state->deck[i][j] = estate;
      135:  144:	  state->deckCount[i]++;
        -:  145:	}
      360:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      315:  148:	  state->deck[i][j] = copper;
      315:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       45:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       45:  166:      state->handCount[i] = 0;
       45:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
       75:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
       55:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       55:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       55:  209:  if (state->deckCount[player] < 1)
       10:  210:    return -1;
       45:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      540:  214:  while (state->deckCount[player] > 0) {
      450:  215:    card = floor(Random() * state->deckCount[player]);
      450:  216:    newDeck[newDeckPos] = state->deck[player][card];
      450:  217:    newDeckPos++;
     1650:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      450:  221:    state->deckCount[player]--;
        -:  222:  }
      495:  223:  for (i = 0; i < newDeckPos; i++) {
      450:  224:    state->deck[player][i] = newDeck[i];
      450:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       45:  228:  return 0;
        -:  229:}
        -:  230:
       15:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       15:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       15:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       15:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       15:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       15:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       15:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       15:  315:int handCard(int handPos, struct gameState *state) {
       15:  316:  int currentPlayer = whoseTurn(state);
       15:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       30:  346:int whoseTurn(struct gameState *state) {
       30:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      145:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      145:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        5:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
        5:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      140:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      140:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      140:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      140:  576:    state->deckCount[player]--;
      140:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      140:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
       15:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
       15:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
       15: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
       15: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
      100: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
       70: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        5: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
       70: 1176:		drawCard(currentPlayer, state);
       70: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       70: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       45: 1179:			drawntreasure++;
        -: 1180:		else{
       25: 1181:			temphand[z]=cardDrawn;
       25: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       25: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
       55: 1186:	while(z-1>=0){
       25: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       25: 1188:		z=z-1;
        -: 1189:	}
       15: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
    #####: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
    #####: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
    #####: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
    #####: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
    #####: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
    #####: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
    #####: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
    #####: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
    #####: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
       15: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       15: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       90: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       75: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       75: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
       15: 1379:  state->coins += bonus;
        -: 1380:
       15: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
cardtest3.c:
TESTING village card:
Test player 0 playing Village card, hand size: 0
G.handCount = 0, expected = 0
G.numActions = 1, expected = 2
Village TEST FAILED
Test player 0 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 0 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 0 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 0 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 0 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 0
G.handCount = 0, expected = 0
G.numActions = 1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 1 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 0
G.handCount = 0, expected = 0
G.numActions = 1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = -1, expected = 2
Village TEST FAILED
Test player 2 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = -1, expected = 2
Village TEST FAILED
File 'cardtest3.c'
Lines executed:95.83% of 24
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:23.09% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      810:    8:int compare(const void* a, const void* b) {
      810:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      810:   11:  if (*(int*)a < *(int*)b)
      216:   12:    return -1;
      594:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       18:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       18:   44:  SelectStream(1);
       18:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       18:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1980:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       18:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       18:   77:  else if (numPlayers == 3)
        -:   78:    {
       18:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       18:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       18:   95:      state->supplyCount[estate] = 12;
       18:   96:      state->supplyCount[duchy] = 12;
       18:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       18:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  102:  state->supplyCount[silver] = 40;
       18:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2970:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2790:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      180:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       72:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       36:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      144:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      180:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2610:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       54:  140:      state->deckCount[i] = 0;
      216:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      162:  143:	  state->deck[i][j] = estate;
      162:  144:	  state->deckCount[i]++;
        -:  145:	}
      432:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      378:  148:	  state->deck[i][j] = copper;
      378:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       54:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       54:  166:      state->handCount[i] = 0;
       54:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      486:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       18:  182:  state->outpostPlayed = 0;
       18:  183:  state->phase = 0;
       18:  184:  state->numActions = 1;
       18:  185:  state->numBuys = 1;
       18:  186:  state->playedCardCount = 0;
       18:  187:  state->whoseTurn = 0;
       18:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
       90:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       18:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       18:  198:  return 0;
        -:  199:}
        -:  200:
       54:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       54:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       54:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       54:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      648:  214:  while (state->deckCount[player] > 0) {
      540:  215:    card = floor(Random() * state->deckCount[player]);
      540:  216:    newDeck[newDeckPos] = state->deck[player][card];
      540:  217:    newDeckPos++;
     1980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1440:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      540:  221:    state->deckCount[player]--;
        -:  222:  }
      594:  223:  for (i = 0; i < newDeckPos; i++) {
      540:  224:    state->deck[player][i] = newDeck[i];
      540:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       54:  228:  return 0;
        -:  229:}
        -:  230:
       18:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       18:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       18:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       18:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       18:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       18:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        3:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       15:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       18:  315:int handCard(int handPos, struct gameState *state) {
       18:  316:  int currentPlayer = whoseTurn(state);
       18:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       33:  346:int whoseTurn(struct gameState *state) {
       33:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      105:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      105:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      105:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      105:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      105:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      105:  576:    state->deckCount[player]--;
      105:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      105:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
       15:  797:      villageFunc(state, currentPlayer, handPos);
       15:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
    #####: 1108:      state->numBuys++;
        -: 1109:			
    #####: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
    #####: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
    #####: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
    #####: 1119:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
       15: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
       15: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
       15: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
       15: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
       15: 1275:    discardCard(handPos, currentPlayer, state, 0);
       15: 1276:    return 0;
        -: 1277:}
        -: 1278:
       15: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
       15: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
       15: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
       15: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
       15: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
       15: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
       15: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
       15: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
       15: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
       15: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
       18: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       18: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
      108: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       90: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       90: 1366:	  state->coins += 1;
        -: 1367:	}
    #####: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
    #####: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
       18: 1379:  state->coins += bonus;
        -: 1380:
       18: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
cardtest4.c:
TESTING Salvager card:
Test player 0 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
File 'cardtest4.c'
Lines executed:96.15% of 26
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:25.58% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     7425:    8:int compare(const void* a, const void* b) {
     7425:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     7425:   11:  if (*(int*)a < *(int*)b)
     1980:   12:    return -1;
     5445:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      165:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      165:   44:  SelectStream(1);
      165:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      165:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      165:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1815:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    18150:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    16500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      165:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      165:   77:  else if (numPlayers == 3)
        -:   78:    {
      165:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      165:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      165:   95:      state->supplyCount[estate] = 12;
      165:   96:      state->supplyCount[duchy] = 12;
      165:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      165:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      165:  102:  state->supplyCount[silver] = 40;
      165:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3465:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    27225:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    25575:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1650:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      660:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      330:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1320:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1650:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    23925:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      660:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      495:  140:      state->deckCount[i] = 0;
     1980:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1485:  143:	  state->deck[i][j] = estate;
     1485:  144:	  state->deckCount[i]++;
        -:  145:	}
     3960:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3465:  148:	  state->deck[i][j] = copper;
     3465:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      660:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      495:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      660:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      495:  166:      state->handCount[i] = 0;
      495:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4620:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4455:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      165:  182:  state->outpostPlayed = 0;
      165:  183:  state->phase = 0;
      165:  184:  state->numActions = 1;
      165:  185:  state->numBuys = 1;
      165:  186:  state->playedCardCount = 0;
      165:  187:  state->whoseTurn = 0;
      165:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      990:  192:  for (it = 0; it < 5; it++){
      825:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      165:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      165:  198:  return 0;
        -:  199:}
        -:  200:
      495:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      495:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      495:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      495:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5940:  214:  while (state->deckCount[player] > 0) {
     4950:  215:    card = floor(Random() * state->deckCount[player]);
     4950:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4950:  217:    newDeckPos++;
    18150:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    13200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     4950:  221:    state->deckCount[player]--;
        -:  222:  }
     5445:  223:  for (i = 0; i < newDeckPos; i++) {
     4950:  224:    state->deck[player][i] = newDeck[i];
     4950:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      495:  228:  return 0;
        -:  229:}
        -:  230:
      165:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      165:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      165:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      165:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      165:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      165:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      165:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      165:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      165:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      165:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      330:  315:int handCard(int handPos, struct gameState *state) {
      330:  316:  int currentPlayer = whoseTurn(state);
      330:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      495:  346:int whoseTurn(struct gameState *state) {
      495:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      825:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      825:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      825:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      825:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      825:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      825:  576:    state->deckCount[player]--;
      825:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      825:  580:  return 0;
        -:  581:}
        -:  582:
      330:  583:int getCost(int cardNumber)
        -:  584:{
      330:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       60:  602:      return 6;
        -:  603:    case council_room:
       54:  604:      return 5;
        -:  605:    case feast:
       48:  606:      return 4;
        -:  607:    case gardens:
       42:  608:      return 4;
        -:  609:    case mine:
       36:  610:      return 5;
        -:  611:    case remodel:
       30:  612:      return 4;
        -:  613:    case smithy:
       24:  614:      return 4;
        -:  615:    case village:
       18:  616:      return 3;
        -:  617:    case baron:
       12:  618:      return 4;
        -:  619:    case great_hall:
        6:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      165:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      165:  653:  int currentPlayer = whoseTurn(state);
      165:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      165:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      165:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      165:  660:  int z = 0;// this is the counter for the temp hand
      165:  661:  if (nextPlayer > (state->numPlayers - 1)){
       55:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      165:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerFunc(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  671:      break;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:	  remodelFunc(state, currentPlayer, handPos, choice1, choice2);
    #####:  790:	  break;
        -:  791:		
        -:  792:    case smithy:
    #####:  793:      smithyFunc(state, currentPlayer, handPos);
    #####:  794:	  break;
        -:  795:		
        -:  796:    case village:
    #####:  797:      villageFunc(state, currentPlayer, handPos);
    #####:  798:	  break;
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
        -:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
        -:  827:	      }
        -:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
        -:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
    #####:  852:      greatHallFunc(state, currentPlayer, handPos);
    #####:  853:	  break;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
    #####:  907:      if (choice1 == 1)
        -:  908:	{
        -:  909:	  //+2 cards
    #####:  910:	  drawCard(currentPlayer, state);
    #####:  911:	  drawCard(currentPlayer, state);
        -:  912:	}
    #####:  913:      else if (choice1 == 2)
        -:  914:	{
        -:  915:	  //+2 coins
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:      else
        -:  919:	{
        -:  920:	  //trash 2 cards in hand
    #####:  921:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  922:	  discardCard(choice3, currentPlayer, state, 1);
        -:  923:	}
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case tribute:
    #####:  930:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  931:	if (state->deckCount[nextPlayer] > 0){
    #####:  932:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:	  state->deckCount[nextPlayer]--;
        -:  934:	}
    #####:  935:	else if (state->discardCount[nextPlayer] > 0){
    #####:  936:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  937:	  state->discardCount[nextPlayer]--;
        -:  938:	}
        -:  939:	else{
        -:  940:	  //No Card to Reveal
        -:  941:	  if (DEBUG){
        -:  942:	    printf("No cards to reveal\n");
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      else{
    #####:  948:	if (state->deckCount[nextPlayer] == 0){
    #####:  949:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  950:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  951:	    state->deckCount[nextPlayer]++;
    #####:  952:	    state->discard[nextPlayer][i] = -1;
    #####:  953:	    state->discardCount[nextPlayer]--;
        -:  954:	  }
        -:  955:			    
    #####:  956:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  957:	} 
    #####:  958:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  960:	state->deckCount[nextPlayer]--;
    #####:  961:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
        -:  964:      }    
        -:  965:		       
    #####:  966:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  967:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  968:	state->playedCardCount++;
    #####:  969:	tributeRevealedCards[1] = -1;
        -:  970:      }
        -:  971:
    #####:  972:      for (i = 0; i <= 2; i ++){
    #####:  973:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  974:	  state->coins += 2;
        -:  975:	}
        -:  976:		    
    #####:  977:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
        -:  981:	else{//Action Card
    #####:  982:	  state->numActions = state->numActions + 2;
        -:  983:	}
        -:  984:      }
        -:  985:	    
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case ambassador:
    #####:  989:      j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:      if (choice2 > 2 || choice2 < 0)
        -:  992:	{
    #####:  993:	  return -1;				
        -:  994:	}
        -:  995:
    #####:  996:      if (choice1 == handPos)
        -:  997:	{
    #####:  998:	  return -1;
        -:  999:	}
        -: 1000:
    #####: 1001:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1002:	{
    #####: 1003:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1004:	    {
    #####: 1005:	      j++;
        -: 1006:	    }
        -: 1007:	}
    #####: 1008:      if (j < choice2)
        -: 1009:	{
    #####: 1010:	  return -1;				
        -: 1011:	}
        -: 1012:
        -: 1013:      if (DEBUG) 
        -: 1014:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:      //increase supply count for choosen card by amount being discarded
    #####: 1017:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:			
        -: 1019:      //each other player gains a copy of revealed card
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:	{
    #####: 1022:	  if (i != currentPlayer)
        -: 1023:	    {
    #####: 1024:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1025:	    }
        -: 1026:	}
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1030:
        -: 1031:      //trash copies of cards returned to supply
    #####: 1032:      for (j = 0; j < choice2; j++)
        -: 1033:	{
    #####: 1034:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1035:	    {
    #####: 1036:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1037:		{
    #####: 1038:		  discardCard(i, currentPlayer, state, 1);
    #####: 1039:		  break;
        -: 1040:		}
        -: 1041:	    }
        -: 1042:	}			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case cutpurse:
        -: 1047:
    #####: 1048:      updateCoins(currentPlayer, state, 2);
    #####: 1049:      for (i = 0; i < state->numPlayers; i++)
        -: 1050:	{
    #####: 1051:	  if (i != currentPlayer)
        -: 1052:	    {
    #####: 1053:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1054:		{
    #####: 1055:		  if (state->hand[i][j] == copper)
        -: 1056:		    {
    #####: 1057:		      discardCard(j, i, state, 0);
    #####: 1058:		      break;
        -: 1059:		    }
    #####: 1060:		  if (j == state->handCount[i])
        -: 1061:		    {
    #####: 1062:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1063:			{
        -: 1064:			  if (DEBUG)
        -: 1065:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:			}	
    #####: 1067:		      break;
        -: 1068:		    }		
        -: 1069:		}
        -: 1070:					
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}				
        -: 1074:
        -: 1075:      //discard played card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1077:
    #####: 1078:      return 0;
        -: 1079:
        -: 1080:		
        -: 1081:    case embargo: 
        -: 1082:      //+2 Coins
    #####: 1083:      state->coins = state->coins + 2;
        -: 1084:			
        -: 1085:      //see if selected pile is in play
    #####: 1086:      if ( state->supplyCount[choice1] == -1 )
        -: 1087:	{
    #####: 1088:	  return -1;
        -: 1089:	}
        -: 1090:			
        -: 1091:      //add embargo token to selected supply pile
    #####: 1092:      state->embargoTokens[choice1]++;
        -: 1093:			
        -: 1094:      //trash card
    #####: 1095:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case outpost:
        -: 1099:      //set outpost flag
    #####: 1100:      state->outpostPlayed++;
        -: 1101:			
        -: 1102:      //discard card
    #####: 1103:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case salvager:
        -: 1107:      //+1 buy
      165: 1108:      state->numBuys++;
        -: 1109:			
      165: 1110:      if (choice1)
        -: 1111:	{
        -: 1112:	  //gain coins equal to trashed card
      165: 1113:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1114:	  //trash card
      165: 1115:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1116:	}
        -: 1117:			
        -: 1118:      //discard card
      165: 1119:      discardCard(handPos, currentPlayer, state, 0);
      165: 1120:      return 0;
        -: 1121:		
        -: 1122:    case sea_hag:
    #####: 1123:      for (i = 0; i < state->numPlayers; i++){
    #####: 1124:	if (i != currentPlayer){
    #####: 1125:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1126:	  state->discardCount[i]++;
    #####: 1127:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1128:	}
        -: 1129:      }
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case treasure_map:
        -: 1133:      //search hand for another treasure_map
    #####: 1134:      index = -1;
    #####: 1135:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1136:	{
    #####: 1137:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1138:	    {
    #####: 1139:	      index = i;
    #####: 1140:	      break;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (index > -1)
        -: 1144:	{
        -: 1145:	  //trash both treasure cards
    #####: 1146:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1147:	  discardCard(index, currentPlayer, state, 1);
        -: 1148:
        -: 1149:	  //gain 4 Gold cards
    #####: 1150:	  for (i = 0; i < 4; i++)
        -: 1151:	    {
    #####: 1152:	      gainCard(gold, state, 1, currentPlayer);
        -: 1153:	    }
        -: 1154:				
        -: 1155:	  //return success
    #####: 1156:	  return 1;
        -: 1157:	}
        -: 1158:			
        -: 1159:      //no second treasure_map found in hand
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
    #####: 1163:  return -1;
        -: 1164:}
        -: 1165:/*********************************************************************
        -: 1166:** adventurerFunc
        -: 1167:** Description: Function to implement adventurer as a stand alone
        -: 1168:** function
        -: 1169:*********************************************************************/
    #####: 1170:int adventurerFunc(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -: 1171:{
    #####: 1172:	while(drawntreasure<3){ //bugline changed will run while drawn treasure is <3 instead of <2
    #####: 1173:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1174:			shuffle(currentPlayer, state);
        -: 1175:		}
    #####: 1176:		drawCard(currentPlayer, state);
    #####: 1177:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1178:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1179:			drawntreasure++;
        -: 1180:		else{
    #####: 1181:			temphand[z]=cardDrawn;
    #####: 1182:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1183:			z++;
        -: 1184:		}
        -: 1185:	}
    #####: 1186:	while(z-1>=0){
    #####: 1187:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1188:		z=z-1;
        -: 1189:	}
    #####: 1190:	return 0;
        -: 1191:}
        -: 1192:/*********************************************************************
        -: 1193:** greatHallFunc
        -: 1194:** Description: Function to implement great_hall as a stand alone
        -: 1195:** function
        -: 1196:*********************************************************************/
    #####: 1197:int greatHallFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1198:{
        -: 1199:	//+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:			
        -: 1202:    //+1 Actions
    #####: 1203:    state->numActions++;
        -: 1204:			
        -: 1205:    //discard card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 1); //bugline, altered trash flag for discard card. 
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
        -: 1210:/*********************************************************************
        -: 1211:** smithyFunc
        -: 1212:** Description: Function to implement smithy as a stand alone
        -: 1213:** function
        -: 1214:*********************************************************************/
    #####: 1215:int smithyFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1216:{
        -: 1217:	int i;
        -: 1218:	//+3 Cards
    #####: 1219:    for (i = 0; i < 2; i++) //bugline, will only draw 2 cards now instead of 3.
        -: 1220:	{
    #####: 1221:	  drawCard(currentPlayer, state);
        -: 1222:	}
        -: 1223:			
        -: 1224:    //discard card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:    return 0;
        -: 1227:}
        -: 1228:/*********************************************************************
        -: 1229:** remodelFunc
        -: 1230:** Description: Function to implement remodel as a stand alone
        -: 1231:** function
        -: 1232:*********************************************************************/
    #####: 1233:int remodelFunc(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1234:{
        -: 1235:	int i, j;
    #####: 1236:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1237:
    #####: 1238:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:    gainCard(choice2, state, 0, currentPlayer);
        -: 1244:
        -: 1245:      //discard card from hand
    #####: 1246:    discardCard(handPos, currentPlayer, state, 0);
        -: 1247:
        -: 1248:      //discard trashed card
    #####: 1249:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:	{
    #####: 1251:	  if (state->hand[currentPlayer][i] == j)
        -: 1252:	    {
    #####: 1253:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1254:	      break;
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:
    #####: 1259:    return 0;
        -: 1260:}
        -: 1261:/*********************************************************************
        -: 1262:** villageFunc
        -: 1263:** Description: Function to implement village as a stand alone
        -: 1264:** function
        -: 1265:*********************************************************************/
    #####: 1266:int villageFunc(struct gameState *state, int currentPlayer, int handPos)
        -: 1267:{
        -: 1268:	//+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:			
        -: 1271:    //+2 Actions
    #####: 1272:    state->numActions = state->numActions - 2; //bugline removes 2 actions from action count instead of adding 2.
        -: 1273:			
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
      330: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
      330: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
      165: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      165: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
      330: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
      330: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
       33: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
      297: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
    #####: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
      297: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
      297: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
      297: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
      330: 1314:  return 0;
        -: 1315:}
        -: 1316:
    #####: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
    #####: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
    #####: 1337:  else if (toFlag == 2)
        -: 1338:    {
    #####: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
    #####: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
    #####: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
    #####: 1351:  return 0;
        -: 1352:}
        -: 1353:
      330: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
      330: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
     2145: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
     1815: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
      825: 1366:	  state->coins += 1;
        -: 1367:	}
      990: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
      990: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
      330: 1379:  state->coins += bonus;
        -: 1380:
      330: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
